// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Pick {
  id              Int       @default(autoincrement()) @id
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  year            Int       @default(0)
  show            String    @db.VarChar(255)
  week            Int?      
  person          String    @db.VarChar(255)
  user            User?      @relation(fields: [userId], references: [id])
  userId          String?    @db.VarChar(255)
  private         Boolean   @default(false)
  type            String    @db.VarChar(255)
  description     String    @db.VarChar(255)
  homeTeam        NflTeam 
  awayTeam        NflTeam 
  homeTeamScore   Int?
  awayTeamScore   Int?
  winner          Int?
  push            Int?
  gameDate        DateTime?
  result          String?    @db.VarChar(255)
  league          String    @db.VarChar(255)
  betLink         String?    @db.VarChar(255)
  espnLink        String?    @db.VarChar(255)
  highlighLink    String?    @db.VarChar(255)
  specialBet      String    @db.VarChar(255)
  fade            Fade[]    
  tail            Tail[]    
  nerdNugget      String?    @db.VarChar(510)

  @@index([userId])
}

model User {
  id       String    @id
  username String    @unique
  email    String?    @unique
  hashed_password String
  avatar   Avatar?
  fades    Fade[]
  tails    Tail[]
  picks    Pick[]
  sessions Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model Avatar {
  id       Int      @default(autoincrement()) @id
  size     Int
  type     String
  name     String
  path     String
  lastModified DateTime
  user   User @relation(references: [id], fields: [userId])
  userId String  @unique // relation scalar field (used in the `@relation` attribute above)
}

model Fade {
  id       Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  pick     Pick     @relation(fields: [pickId], references: [id])
  pickId   Int
  winner   Boolean?
  push     Boolean?

  @@index([pickId])
}

model Tail {
  id       Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  pick     Pick     @relation(fields: [pickId], references: [id])
  pickId   Int
  winner   Boolean?
  push     Boolean?

  @@index([pickId])
}

enum NflTeam {
  cardinals
  falcons
  ravens
  bills
  panthers
  bears
  bengals
  browns
  cowboys
  broncos
  lions
  packers
  texans
  colts
  jaguars
  chiefs
  chargers
  rams
  dolphins
  vikings
  patriots
  saints
  giants
  jets
  raiders
  eagles
  steelers
  fortyNiners
  seahawks
  buccaneers
  titans
  commanders
}